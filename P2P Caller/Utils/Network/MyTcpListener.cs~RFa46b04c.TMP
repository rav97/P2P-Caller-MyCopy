using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Windows.Forms;

namespace P2P_Caller.Utils.Network
{
    class MyTcpListener
    {
        static string myIPAddress = Global.GetLocalIPAddress();
        static Random rand = new Random();
        static int myPort;
        static PSSP recvPSSP;
        static PSSP sentPSSP;
        Thread thread;

        public MyTcpListener()
        {
            thread = new Thread(Start);
            thread.Start();
        }

        public void Start()
        {
            TcpListener server = null;
            try
            {
                IPAddress localAddr = IPAddress.Parse(myIPAddress);
                server = new TcpListener(localAddr, 13000);
                server.Start();

                // Enter the listening loop.
                while (true)
                {
                    Console.Write("Waiting for a connection... ");

                    TcpClient client = server.AcceptTcpClient();

                    Console.WriteLine("Connected!");

                    ThreadPool.QueueUserWorkItem(ThreadProc, new object[] { client, Global.Busy});
                }
            }
            catch (SocketException e)
            {
                Console.WriteLine("SocketException: {0}", e);
            }
            finally
            {
                // Stop listening for new clients.
                server.Stop();
            }
        }

        private static void ThreadProc(object obj)
        {
            object[] args = obj as object[];
            TcpClient client = (TcpClient)args[0];
            bool busy = (bool)args[1];

            Byte[] bytes = new Byte[33];
            String data = null;
            data = null;

            // Get a stream object for reading and writing
            NetworkStream stream = client.GetStream();

            if (!Global.Talking)
            {
                int i;

                // Loop to receive all the data sent by the client.
                while ((i = stream.Read(bytes, 0, bytes.Length)) != 0)
                {
                    data = System.Text.Encoding.ASCII.GetString(bytes, 0, i);
                    Console.WriteLine("Received: {0}", data);
                    recvPSSP = new PSSP(data.ToUpper());

                    //  Checking if user rejected the incoming call or is during conversation.
                    if (!Global.Busy)
                    {
                        myPort = RandomPort(recvPSSP.getPORT());
                        sentPSSP = new PSSP(PSSP.Type.ACK, myIPAddress, myPort);
                        stream.Write(sentPSSP.ToBytes(), 0, sentPSSP.ToBytes().Length);
                    }
                    else
                    {
                        sentPSSP = new PSSP(PSSP.Type.BUSY);
                        stream.Write(sentPSSP.ToBytes(), 0, sentPSSP.ToBytes().Length);
                    }

                }
            }
            else
            {
                sentPSSP = new PSSP(PSSP.Type.BUSY);
                stream.Write(sentPSSP.ToBytes(), 0, sentPSSP.ToBytes().Length);
            }
            // Shutdown and end connection
            client.Close();
        }

        public void Stop()
        {
            thread.Abort();
        }

        // Used if caller has same port like us
        static int RandomPort(int port)
        {
            int newPort = rand.Next(49152, 65536);
            if (newPort == port)
            {
                return RandomPort(port);
            }
            return newPort;
        }

    }
}
